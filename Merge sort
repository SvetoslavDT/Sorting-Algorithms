template<typename T>
void Merge(T* firstArr, size_t firstSize, T* secondArr, size_t secondSize, T* resultArr)
{
    size_t firstIter = 0;
    size_t secondIter = 0;
    size_t resultIter = 0;

    while (firstIter < firstSize && secondIter < secondSize)
        resultArr[resultIter++] = firstArr[firstIter] <= secondArr[secondIter] ? firstArr[firstIter++] : secondArr[secondIter];

    while (firstIter < firstSize)
        resultArr[resultIter++] = firstArr[firstIter++];

    while (secondIter < secondSize)
        resultArr[resultIter++] = secondArr[secondIter++];
}

template<typename T>
void MergeSortStep(T* pArr, size_t Size, T* pBuffer)
{
    if (Size <= 1 || !pArr)
        return;

    size_t middle = Size / 2;
    
    MergeSortStep(pArr, middle, pBuffer);

    MergeSortStep(pArr + middle, Size - middle, pBuffer + middle);

    Merge(pArr, middle, pArr + middle, Size - middle, pBuffer);

    for (size_t i = 0; i < Size; ++i)
    {
        pArr[i] = pBuffer[i];
    }
}

template<typename T>
void MergeSort(T* arr, size_t Size)
{
    if (!arr || Size == 0)
        return;

    T* pBuffer = new T[Size];
    
    MergeSortStep(arr, Size, pBuffer);

    delete[] pBuffer;
}
